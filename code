import java.util.Scanner;
public class FINDWORD {

    public static void main(String[] args) {
     Scanner read = new Scanner(System.in);

        char puzzle [][] = 
        {
           {'A','B','I','N','D','C'},
           {'Q','F','P','M','V','T'},
           {'K','L','S','Z','R','A'},
           {'U','Y','G','U','D','C'},
           {'R','X','F','W','N','P'},
           {'L','J','Y','V','E','R'},
        };
        int[][] index = new int[25][2];
        int n = 0; 
        boolean falsee = false;
        
        for (int i = 0; i < 6; i++)
        {
            for (int j = 0; j < 6; j++)
            {
                System.out.print(puzzle[i][j]); 
                System.out.print("  ");
            }
            System.out.println();
        }        
        System.out.println("hi type your word");
        String word = read.next();

        

       
        
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 6; j++) {
                if (puzzle[i][j] == word.charAt(0)) {
                    index[n][0] = i;
                    index[n][1] = j;
                    n++;
                }
            }
        }


        for (int i = 0; i < n; i++) {

            int I = index[i][0];
            int J = index[i][1];

            
            for (int k = 1; k < word.length(); k++) {

                I = (I + 1) % 6;

                if (puzzle[I][J] != word.charAt(k)) {
                    I = index[i][0];
                    J = index[i][1];
                    break;
                } else if (word.length() - 1 == k) {
                    falsee = true;
                    System.out.println("it is vertically from up to down at: " + index[i][0] + ", " + index[i][1]);
                    break;
                }
            }

            
            
            for (int k = 1; k < word.length(); k++) {

                I = ((I - 1) % 6 + 6) % 6;

                if (puzzle[I][J] != word.charAt(k)) {
                    I = index[i][0];
                    J = index[i][1];
                    break;
                } else if (word.length() - 1 == k) {
                    falsee = true;
                    System.out.println("it is vertically from bottom to top at: " + index[i][0] + ", " + index[i][1]);
                    break;
                }
            }
              
            for (int k = 1; k < word.length(); k++) {

                J = (J + 1) % 6;

                if (puzzle[I][J] != word.charAt(k)) {
                    I = index[i][0];
                    J = index[i][1];
                    break;
                } else if (word.length() - 1 == k) {
                    falsee = true;
                    System.out.println("it is horizontally fromleft to right at: " + index[i][0] + ", " + index[i][1]);
                    break;
                }
            }

            //horizontally right to left
            for (int k = 1; k < word.length(); k++) {

                J = ((J - 1) % 6 + 6) % 6;


                if (puzzle[I][J] != word.charAt(k)) {
                    I = index[i][0];
                    J = index[i][1];
                    break;

                } else if (word.length() - 1 == k) {

                    falsee = true;
                    System.out.println("it is horizontally from right to left at: " + index[i][0] + ", " + index[i][1]);
                    break;

                }
            }

            for (int k = 1; k < word.length(); k++) {

                I = I + 1;
                J = J + 1;

                if (I > 5) {
                    I = I - J;
                    J = 0;
                }
                if (J > 5) {
                    J = J - I;
                    I = 0;
                }


                if (puzzle[(I)][(J)] != word.charAt(k)) {
                    I = index[i][0];
                    J = index[i][1];
                    break;
                } else if (word.length() - 1 == k) {
                    falsee = true;
                    System.out.println("Found in the lower diagonal at: " + index[i][0] + ", " + index[i][1]);
                    break;
                }
            }


            for (int k = 1; k < word.length(); k++) {

                I = I - 1;
                J = J - 1;

                if (I < 0) {
                    I = I + J;
                    J = 5;
                }
                if (J < 0) {
                    J = J + I;
                    I = 5;
                }

                if (puzzle[(I)][(J)] != word.charAt(k)) {
                    break;
                } else if (word.length() - 1 == k) {
                    falsee = true;
                    System.out.println("Found in the upper diagonal at: " + index[i][0] + ", " + index[i][1]);
                    break;
                }
            }
        }


        if (!falsee) {
            System.out.println("The word is not here");
        }
    }
}
